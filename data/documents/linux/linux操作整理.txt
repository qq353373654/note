// post,curl
curl -X POST http://36.0.234.157/extrisk/distr/t/callback -H 'content-type: application/x-www-form-urlencoded' -d "icode=0078&data=xxx&salt=yyy&key=zzz"
// 使用curl时，有两个超时时间：一个是连接超时时间，另一个是数据传输的最大允许时间。
// 连接超时时间用 --connect-timeout 参数来指定，数据传输的最大允许时间用 -m 参数来指定。
curl --connect-timeout 10 -m 20 "http://XXXXXXX"
// post请求,查看耗时
curl -w "time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_redirect: %{time_redirect}\ntime_pretransfer: %{time_pretransfer}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" -X POST http://www.baidu.com -H 'content-type: application/x-www-form-urlencoded' -d "123"
time_namelookup ：DNS 域名解析的时候，就是把 https://zhihu.com 转换成 ip 地址的过程
time_connect ：TCP 连接建立的时间，就是三次握手的时间
time_appconnect ：SSL/SSH 等上层协议建立连接的时间，比如 connect/handshake 的时间
time_redirect ：从开始到最后一个请求事务的时间
time_pretransfer ：从请求开始到响应开始传输的时间
time_starttransfer ：从请求开始到第一个字节将要传输的时间
time_total ：这次请求花费的全部时间

// linux下启动jar包
setsid java -jar /sunyard/service/sunpls-service-hycf.jar >> /sunyard/service/sunpls-hycf.log &
setsid java -jar -Dfile.encoding=UTF-8 jar包地址 >> 日志地址 &
// linux下持续查看日志
tail -200f /sunyard/service/sunpls-hycf.log
// 启动jar包的时候开启监听5005端口(测试环境)
setsid java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 sl-accounts.jar
// 以指定编码格式启动jar包
setsid java -jar -Dfile.encoding=UTF-8 jar包地址 >> 日志地址 &
// 限制jar启动时内存
java -jar -Xms512m -Xmx512m xxxxx.jar

// 查看进程是否存在
ps -a | grep '关键字'
// 查看占用端口的进程号
lsof -i:8080
// 直接通过端口号杀进程
kill -9 `lsof -ti:8080`

// 查看日志等,
	// cat是从上往下搜,tac是从下往上搜,-m的意思是限制搜索几行信息,--color是给关键字加颜色
	cat 日志文件名称 | grep '关键字' -m 10 --color
	// 从底部指定行数开始查询相关日志 -f是持续查看追加内容, -n是不持续查看
	tail -n 9999 日志文件名称 | grep '关键字' --color

//  linux抓包指令:(不同系统可能指令不同) -w dump.pcap #指定结果保存的位置
tcpdump -i any host {要截取数据的ip} -w dump.pcap
https://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html

// 如果想要知道客户端和服务端究竟协商成了什么样的算法，那么可以ssh -vvv 目标IP，加上参数-vvv之后，ssh连接过程中的所有debug日志都会被打印出来。
// sftp登录,私钥文件权限不可过高,chmod ［who］ ［+ | – | =］ ［mode］ 文件名,chomd 600 {fileName} 即可,
sftp -oIdentityFile=/home/xyd/.ssh/sftp_privateKey_test -oPort=2222 instloantest@inner.sftp.baidu.com

// Linux字符编码默认为UTF-8,如出现乱码可设置为GBK, https://www.cnblogs.com/Kconnie/p/5418278.html
Linux字符编码默认为UTF-8，如出现乱码可设置为GBK
1.手动更改profile文件的命令：
vi /etc/profile
也可以修改 /etc/sysconfig/i18n 文件，如
LANG="en_US.UTF-8"
LANG="zh_CN.GB18030"
LANG="zh_CN.GBK"
SUPPORTED="zh_CN.UTF-8:zh_CN:zh"
2.在文件的末尾添加以下两行命令：
export LC_ALL="zh_CN.GBK"
export LANG="zh_CN.GBK"
3.也可在/root/.bash_profile文件的末尾添加以下两行命令：
export LC_ALL="zh_CN.GBK"
export LANG="zh_CN.GBK"
重新启动服务器使更改生效。
4.修改成功以后用locale命令查看，修改前的默认设置为：
# locale


// linux新建用户并增加sudo权限
	https://blog.csdn.net/yimingsilence/article/details/80738008
	sudo adduser {username}
	sudo usermod -aG sudo {username}
// 删除用户
	userdel {username} -r
// 为用户增加密码
	passwd username
// 新建工作组
	groupadd {groupname}
// 将用户添加进工作组
	usermod -G {groupname} {username}
// 修改用户所在的工作组(直接覆盖已存在的工作组)
	usermod -g git wuhuan
// 用户的主目录指向某文件夹
	usermod -d /gitRepository {username}
// 避免git用户登录操作系统 /etc/passwd 的 /bin/bash 改为 /sunyard/git-2.9.5/git-shell
	usermod -s /sunyard/git-2.9.5/git-shell {username}
// linux下查看所有用户及所有用户组
	// 查看当前登录用户的组内成员
	groups
	// 查看该用户所在的组,以及组内成员
	groups {username}
	// 查看当前登录用户名
	whoami
// 修改git仓库所在目录/home/data/git/的用户组为gitgroup
	chgrp -R gitgroup /home/data/git/
// 设置文件或文件夹的权限, -R 改变这个目录及其下面所有的文件和目录的所有者
	chown wuhuan:git git

该文件所属的组是否对该用户具有写权限. 如果没有写权限, 则这个目录下的所有文件都不能被删除, 同时也不能添加新的文件. 如果希望用户能够添加文件
但同时不能删除文件, 则可以对文件使用sticky bit位. 设置该位后, 就算用户对目录
具有写权限, 也不能删除该文件.
下面说一下如何操作这些标志:
操作这些标志与操作文件权限的命令是一样的, 都是 chmod. 有两种方法来操作,
1) chmod u+s temp — 为temp文件加上setuid标志. (setuid 只对文件有效)
chmod g+s tempdir — 为tempdir目录加上setgid标志 (setgid 只对目录有效)
chmod o+t temp — 为temp文件加上sticky标志 (sticky只对文件有效)

// 查看当前文件夹大小
du -sh
// 查看文件或目录大小
du -h
du {目录名/文件名} -h

// 查看用户的一些配置信息
	cat /etc/passwd

// linux压缩文件
zip [选项] 压缩包名 源文件或源目录 -r：压缩目录
zip test.zip abc abcd
unzip [选项] 压缩包名 -d：指定解压缩位置
unzip -d /tmp/ test.zip
gzip -r 123
gunzip -c install.log.gz (-c是保留原文件)
gzip -dc anaconda-ks.cfg.gz (-d是解压缩,-c是保留原文件)

// linux授权某个用户对某个目录有读写的权限
https://www.cnblogs.com/zrp2013/p/4529820.html
  // 给指定用户增加权限 -m
  setfacl -R -m u:username:rwx your_file_or_fir
  如setfacl -R -m u:zrp:rwx /home/www
  // 给指定用户移除权限限制 -x
  setfacl -R -x u:username your_file_or_fir
  // 查看权限
  getfacl your_file_or_fir

// alias 别名, 删除别名则是 unalias {别名}
  // 需编辑到 vim ~/.bashrc 并刷新 source ~/.bashrc 再编辑 ~/.bash_profile 在里面加入一行：source ~/.bashrc
  alias[别名]=[指令名称]
  // 给alias的命令传递自定义参数 https://www.kanzhun.com/jiaocheng/368054.html
    /!:1    表示第1个参数
    /!:2*  表示第2个及余下的所有参数
    /!*      表示所有参数
	// 下面的alias将实现"查出用户名为xddai的名为用户传递参数的所有进程号,并传递给kill,将其kill掉"
      alias mykill    'ps -u xddai | grep /!:1 | awk' "'"'{print $1}'"'|xargs kill"
      ps -ef | grep java | awk '{print $11}' | xargs
  // Linux下alias使用外部传参 https://blog.csdn.net/huangzx3/article/details/82689142
    alias s='UpMachine(){ ssh root@$1;};UpMachine'
// alias 示例
alias test='test(){ printf "$1abc\n"$1def\\n;};test'
alias grepjar='ps -ef|grep jar'
alias sunlog='sunlog(){ 
name=${1:-info}
if [ ${name} = "debug" -o ${name} = "info" -o ${name} = "warn" -o ${name} = "error" ];
then
  view /sunyard/java/logs/saas-accounts/saas_sunxd/${name}.log
else
  echo "sunlog 附带的参数只能是 debug 或 info 或 warn 或 error，不填则为info"
fi;
};sunlog'
alias sunlogf='sunlogf(){ tailf /sunyard/java/logs/saas-accounts/saas_sunxd/${1:-info}.log -100;};sunlogf'
alias gsunlog='gsunlog(){ ${1:+ grep $1 /sunyard/java/logs/saas-accounts/saas_sunxd/${2:-info}.log --color};};gsunlog'
alias log='log(){
logPath=~/java/logs
orgNames=`find ${logPath} -type d -iname "saas_*" | awk -F _ '"'"'{print $2}'"'"' | xargs `
orgName=$1
logNames=(debug info warn error)
logName=${2:-info}
if echo "${orgNames[@]}" | grep -w "${orgName}" &>/dev/null && echo "${logNames[@]}" | grep -w "${logName}" &>/dev/null;
then
  view ${logPath}/saas_${orgName}/${logName}.log
else
  echo "log \${租户名称} \${日志级别}"
  echo "第一个参数应为 ${orgNames// / 或 }"
  echo "第二个参数应为 debug 或 info 或 warn 或 error，不填则为info"
fi;
};log'
alias logf='logf(){
logPath=~/java/logs
orgNames=`find ${logPath} -type d -iname "saas_*" | awk -F _ '"'"'{print $2}'"'"' | xargs `
orgName=$1
logNames=(debug info warn error)
logName=${2:-info}
if echo "${orgNames[@]}" | grep -w "${orgName}" &>/dev/null && echo "${logNames[@]}" | grep -w "${logName}" &>/dev/null;
then
  tailf ${logPath}/saas_${orgName}/${logName}.log -100
else
  echo "logf \${租户名称} \${日志级别}"
  echo "第一个参数应为 ${orgNames// / 或 }"
  echo "第二个参数应为 debug 或 info 或 warn 或 error，不填则为info"
fi;
};logf'
alias glog='glog(){
logPath=~/java/logs
orgNames=`find ${logPath} -type d -iname "saas_*" | awk -F _ '"'"'{print $2}'"'"' | xargs `
grepMsg=$1
orgName=$2
logNames=(debug info warn error)
logName=${3:-info}
if [ ! -z "${grepMsg}" ] && echo "${orgNames[@]}" | grep -w "${orgName}" &>/dev/null && echo "${logNames[@]}" | grep -w "${logName}" &>/dev/null;
then
  grep ${grepMsg} ${logPath}/saas_${orgName}/${logName}.log
else
  echo "glog \${内容} \${租户名称} \${日志级别}"
  echo "第一个参数为待搜索的内容"
  echo "第二个参数应为 ${orgNames// / 或 }"
  echo "第三个参数应为 debug 或 info 或 warn 或 error，不填则为info"
fi;
};glog'
complete -W "`find ~/java/logs/ -type d -iname "saas_*" | awk -F '_' '{print $2}'` debug info warn error" log

// shell 参数替换 https://www.cnblogs.com/itxdm/p/something_of_shellscirpt.html
  // ${parameter:-default} -- 如果变量parameter没被设置, 那么就使用默认值. 
  ${1:-NULL}意思是当$1为空时，自动将NULL替换成$1所要带入的变量值。

// 查找文件夹所在目录
find /* -type d -iname "rabbitmq"

// docker 进入容器 https://www.runoob.com/docker/docker-exec-command.html
docker exec -it 9df70f9a0714 /bin/bash

// 本地文件传到服务器(windows传服务器或服务器传服务器)
scp {本地目录} {远程机账号@远程机地址:目标目录}

// linux下查看文件编码及修改编码 https://blog.csdn.net/zhangge3663/article/details/86607948
在Vim中可以直接查看文件编码 :set fileencoding
如果你只是想查看其它编码格式的文件或者想解决用Vim查看文件乱码的问题，
那么你可以在~/.vimrc文件中添加一下内容: set encoding=utf-8 filenencodings=ucs-bom,utf-8,cp936

// 查看zip文件内容
zcat {fileName}

// 生成rsa公钥 可加注释 -C是comment的缩写 -b是bit的缩写指秘钥的长度 https://blog.csdn.net/weixin_42752574/article/details/106367959
ssh-keygen -t rsa


