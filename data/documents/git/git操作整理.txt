// 搭建远程git仓库
https://blog.csdn.net/firevictor/article/details/80318069
ssh-keygen -t rsa -C "{username}" (注：username为你git上的用户名)
git init --bare sunlink_data.git

// clone远程仓库
git clone "/sunyard/git-2.9.5/git-upload-pack" {linux用户}@{linux Ip}:{仓库地址}

// 私有git服务多用户管理及权限控制
	https://blog.csdn.net/wang839305939/article/details/78194944
	https://blog.csdn.net/u010258933/article/details/80663805
	// 用户的主目录指向某文件夹
		usermod -d /gitRepository {username}
	// 避免git用户登录操作系统 /etc/passwd 的 /bin/bash 改为 /sunyard/git-2.9.5/git-shell
		usermod -s /sunyard/git-2.9.5/git-shell {username}

// remote: error: insufficient permission for adding an object to repository database ./objects
chmod 775 sunlink_data.git -R
chown root:git sunlink_data.git -R
vim /etc/pam.d/sshd , session     optional pam_umask.so umask=0002
// 修改用户所在的工作组(直接覆盖已存在的工作组)
	usermod -g git wuhuan
// 将用户添加进工作组
	usermod -G wuhuan wuhuan

// 合并单个commit到指定的分支上
git log  //查看提交的日志，复制要合并的那个分支的commit id</span>
git checkout 要合并的分支  // 切换到要合并的分支上
git cherry-pick 上面复制的那个要合并的commit id  // 提交该commit到当前分支
git cherry-pick --abort 放弃变更

// 主要操作度小满icode用(合并代码等)
git checkout -b 分支名 // 创建本地临时分支
git push --set-upstream origin <BranchName> // 此操作可将临时分支推至度小满icode
git remote show origin			// 查看本地分支和追踪情况
git remote prune origin			// 同步删除掉的分支信息
git branch -d <BranchName>		// 删除本地分支

// 把目标分支合并到当前分支
git merge ${目标分支}

// 撤销commit,https://www.cnblogs.com/lfxiao/p/9378763.html
// --mixed 意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作 这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。
// --soft 不删除工作空间改动代码，撤销commit，不撤销git add .
// --hard 删除工作空间改动代码，撤销commit，撤销git add . 注意完成这个操作后，就恢复到了上一次的commit状态。
git reset --soft HEAD^

// Git 修改已提交的commit注释 https://www.jianshu.com/p/098d85a58bf1
// 修改最后一次注释 git commit --amend 输入i进入修改模式，修改好注释后，按Esc键 退出编辑模式，输入:wq保存并退出。ok，修改完成

// github上传大文件 https://www.jianshu.com/p/493b81544f80
  // git-lfs下载地址https://github.com/git-lfs/git-lfs/releases
  执行 git lfs install 开启lfs功能
  使用 git lfs track 命令进行大文件追踪 例如git lfs track "*.png" 追踪所有后缀为png的文件
  使用 git lfs track 查看现有的文件追踪模式
  提交代码需要将gitattributes文件提交至仓库. 它保存了文件的追踪记录
  提交后运行git lfs ls-files 可以显示当前跟踪的文件列表
  将代码 push 到远程仓库后，LFS 跟踪的文件会以『Git LFS』的形式显示:
  clone 时 使用'git clone' 或 git lfs clone均可

// git修改提交作者和邮箱 https://blog.csdn.net/diu_brother/article/details/51982993
  // 解决方法一 如果只需要最近一次提交，那么很简单直接使用git commit –amend就可以搞定
  git commit --amend --author="NewAuthor <NewEmail@address.com>"
  // 解决方法二 如果是多个修改，那么就需要使用到git filter-branch这个工具来做批量修改,为了方便大家使用，封装了一个简单的shell脚本，直接修改[XXX]中的变量为对应的值即可
#!/bin/sh

git filter-branch --env-filter '

an="$GIT_AUTHOR_NAME"
am="$GIT_AUTHOR_EMAIL"
cn="$GIT_COMMITTER_NAME"
cm="$GIT_COMMITTER_EMAIL"

if [ "$GIT_COMMITTER_EMAIL" = "[Your Old Email]" ]
then
    cn="[Your New Author Name]"
    cm="[Your New Email]"
fi
if [ "$GIT_AUTHOR_EMAIL" = "[Your Old Email]" ]
then
    an="[Your New Author Name]"
    am="[Your New Email]"
fi

export GIT_AUTHOR_NAME="$an"
export GIT_AUTHOR_EMAIL="$am"
export GIT_COMMITTER_NAME="$cn"
export GIT_COMMITTER_EMAIL="$cm"
'

// git版本回退 https://www.jianshu.com/p/2419924d5d82 http://blog.csdn.net/newjueqi/article/details/49098123
git reset --hard {commit_id}
git reset --hard HEAD^

// Github Git彻底删除历史提交记录的方法
https://blog.csdn.net/cai6811376/article/details/54248764


